{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-e8fd0c8225313ab989fec49712e047cfb2dd0215",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/DualMint.sol": "project/contracts/DualMint.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/DualMint.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '../interfaces/NFT.sol';\n\ncontract DualMint is NFT {\n  address public owner;\n\n  mapping(address => uint256) private _collection;\n\n  event Minted(address _owner, uint256 _amount);\n\n  function mint() external returns (uint256) {\n    // mint new token\n  }\n\n  function balanceOf(address _owner) external view returns (uint256) {}\n  function ownerOf(uint256 _tokenId) external view returns (address) {}\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata data\n  ) external payable {}\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) external payable {}\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) external payable {}\n  function approve(address _approved, uint256 _tokenId) external payable {}\n  function setApprovalForAll(address _operator, bool _approved) external {}\n  function getApproved(uint256 _tokenId) external view returns (address) {}\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  ) external view returns (bool) {}\n}\n"
      },
      "project/interfaces/NFT.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface NFT {\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes calldata data\n    ) external payable;\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external payable;\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external payable;\n    function approve(address _approved, uint256 _tokenId) external payable;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(\n        address _owner,\n        address _operator\n    ) external view returns (bool);\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _tokenId\n    );\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 indexed _tokenId\n    );\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n}\n"
      }
    }
  }
}